{"version":3,"file":"static/js/jserrors-aggregate.658a617f.chunk.js","mappings":"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","sources":["../node_modules/@newrelic/browser-agent/dist/esm/features/jserrors/aggregate/canonical-function-name.js","../node_modules/@newrelic/browser-agent/dist/esm/features/jserrors/aggregate/format-stack-trace.js","../node_modules/@newrelic/browser-agent/dist/esm/common/url/canonicalize-url.js","../node_modules/@newrelic/browser-agent/dist/esm/features/jserrors/aggregate/compute-stack-trace.js","../node_modules/@newrelic/browser-agent/dist/esm/features/jserrors/aggregate/string-hash-code.js","../node_modules/@newrelic/browser-agent/dist/esm/features/jserrors/aggregate/index.js"],"sourcesContent":["/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst canonicalFunctionNameRe = /([a-z0-9]+)$/i;\n\n/**\n * Given a function name string, extracts only an alphanumeric segment at the end of the string (if one exists).\n * This is useful for stack traces, where functions might not be named (e.g., anonymous, computed).\n *\n * @param {string} functionNameString - The original function name string.\n * @returns {string|undefined} The canonical function name, or undefined if the input is falsy or no alphanumeric segments are found.\n */\nexport function canonicalFunctionName(functionNameString) {\n  if (!functionNameString) return;\n  const match = functionNameString.match(canonicalFunctionNameRe);\n  if (match) return match[1];\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nvar stripNewlinesRegex = /^\\n+|\\n+$/g;\nvar MAX_STACK_TRACE_LENGTH = 65530;\nexport function formatStackTrace(stackLines) {\n  return truncateStackLines(stackLines).replace(stripNewlinesRegex, '');\n}\n\n// takes array of stack lines and returns string with top 50 and buttom 50 lines\nfunction truncateStackLines(stackLines) {\n  var stackString;\n  if (stackLines.length > 100) {\n    var truncatedLines = stackLines.length - 100;\n    stackString = stackLines.slice(0, 50).join('\\n');\n    stackString += '\\n< ...truncated ' + truncatedLines + ' lines... >\\n';\n    stackString += stackLines.slice(-50).join('\\n');\n  } else {\n    stackString = stackLines.join('\\n');\n  }\n  return stackString;\n}\n\n// truncates stack string to limit what is sent to backend\nexport function truncateSize(stackString) {\n  return stackString.length > MAX_STACK_TRACE_LENGTH ? stackString.substr(0, MAX_STACK_TRACE_LENGTH) : stackString;\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { initialLocation } from '../constants/runtime';\nimport { cleanURL } from './clean-url';\n\n/**\n * Converts a URL to its basic form without a query string or fragment. If the resulting URL is the same as the\n * loader's origin URL, returns '<inline>'.\n * @param {string} url - The URL to be canonicalized.\n * @param {string} loaderOriginUrl - The origin URL of the agent loader, used for inline detection.\n * @returns {string} The canonicalized URL, or '<inline>' if the URL matches the loader origin URL.\n */\nexport function canonicalizeUrl(url) {\n  if (typeof url !== 'string') return '';\n  const cleanedUrl = cleanURL(url);\n  const cleanedGlobalScopeUrl = cleanURL(initialLocation);\n\n  // If the URL matches the origin URL of the loader, we assume it originated within an inline script.\n  if (cleanedUrl === cleanedGlobalScopeUrl) {\n    return '<inline>';\n  } else {\n    return cleanedUrl;\n  }\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* eslint-disable no-useless-escape */\n\n// computeStackTrace: cross-browser stack traces in JavaScript\n//\n// Syntax:\n//   s = computeStackTrace(exception) // consider using TraceKit.report instead\n// Returns:\n//   s.name              - exception name\n//   s.message           - exception message\n//   s.stack[i].url      - JavaScript or HTML file URL\n//   s.stack[i].func     - function name, or empty for anonymous functions\n//   s.stack[i].line     - line number, if known\n//   s.stack[i].column   - column number, if known\n//   s.stack[i].context  - an array of source code lines; the middle element corresponds to the correct line#\n//   s.mode              - 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace\n//\n// Supports:\n//   - Firefox:  full stack trace with line numbers and unreliable column\n//               number on top frame\n//   - Chrome:   full stack trace with line and column numbers\n//   - Safari:   line and column number for the topmost stacktrace element\n//               only\n//   - IE:       no line numbers whatsoever\n\n// Contents of Exception in various browsers.\n//\n// SAFARI:\n// ex.message = Can't find variable: qq\n// ex.line = 59\n// ex.sourceId = 580238192\n// ex.sourceURL = http://...\n// ex.expressionBeginOffset = 96\n// ex.expressionCaretOffset = 98\n// ex.expressionEndOffset = 98\n// ex.name = ReferenceError\n//\n// FIREFOX:\n// ex.message = qq is not defined\n// ex.fileName = http://...\n// ex.lineNumber = 59\n// ex.stack = ...stack trace... (see the example below)\n// ex.name = ReferenceError\n//\n// CHROME:\n// ex.message = qq is not defined\n// ex.name = ReferenceError\n// ex.type = not_defined\n// ex.arguments = ['aa']\n// ex.stack = ...stack trace...\n//\n// INTERNET EXPLORER:\n// ex.message = ...\n// ex.name = ReferenceError\nimport { formatStackTrace } from './format-stack-trace';\nimport { canonicalizeUrl } from '../../../common/url/canonicalize-url';\nvar debug = false;\nvar classNameRegex = /function (.+?)\\s*\\(/;\nvar chrome = /^\\s*at (?:((?:\\[object object\\])?(?:[^(]*\\([^)]*\\))*[^()]*(?: \\[as \\S+\\])?) )?\\(?((?:file|http|https|chrome-extension):.*?)?:(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nvar gecko = /^\\s*(?:(\\S*|global code)(?:\\(.*?\\))?@)?((?:file|http|https|chrome|safari-extension).*?):(\\d+)(?::(\\d+))?\\s*$/i;\nvar chromeEval = /^\\s*at .+ \\(eval at \\S+ \\((?:(?:file|http|https):[^)]+)?\\)(?:, [^:]*:\\d+:\\d+)?\\)$/i;\nvar ieEval = /^\\s*at Function code \\(Function code:\\d+:\\d+\\)\\s*/i;\n\n/**\n * Represents an error with a stack trace.\n * @typedef {Object} StackInfo\n * @property {string} name - The name of the error (e.g. 'TypeError').\n * @property {string} message - The error message.\n * @property {string} stackString - The stack trace as a string.\n * @property {Array<Object>} frames - An array of frames in the stack trace.\n * @property {string} frames.url - The URL of the file containing the code for the frame.\n * @property {string} frames.func - The name of the function associated with the frame.\n * @property {number} frames.line - The line number of the code in the frame.\n */\n\n/**\n * Attempts to compute a stack trace for the given exception.\n * @param {Error} ex - The exception for which to compute the stack trace.\n * @returns {StackInfo} A stack trace object containing information about the frames on the stack.\n */\nexport function computeStackTrace(ex) {\n  var stack = null;\n  try {\n    stack = computeStackTraceFromStackProp(ex);\n    if (stack) {\n      return stack;\n    }\n  } catch (e) {\n    if (debug) {\n      throw e;\n    }\n  }\n  try {\n    stack = computeStackTraceBySourceAndLine(ex);\n    if (stack) {\n      return stack;\n    }\n  } catch (e) {\n    if (debug) {\n      throw e;\n    }\n  }\n  try {\n    stack = computeStackTraceWithMessageOnly(ex);\n    if (stack) {\n      return stack;\n    }\n  } catch (e) {\n    if (debug) {\n      throw e;\n    }\n  }\n  return {\n    mode: 'failed',\n    stackString: '',\n    frames: []\n  };\n}\n\n/**\n * Computes stack trace information from the stack property. Chrome and Gecko use this property.\n *\n * @param {Error} ex - The error object to compute the stack trace for.\n * @return {?Object.<string, *>} Stack trace information.\n */\nfunction computeStackTraceFromStackProp(ex) {\n  if (!ex.stack) {\n    return null;\n  }\n  var errorInfo = ex.stack.split('\\n').reduce(parseStackProp, {\n    frames: [],\n    stackLines: [],\n    wrapperSeen: false\n  });\n  if (!errorInfo.frames.length) return null;\n  return {\n    mode: 'stack',\n    name: ex.name || getClassName(ex),\n    message: ex.message,\n    stackString: formatStackTrace(errorInfo.stackLines),\n    frames: errorInfo.frames\n  };\n}\n\n/**\n * Parses a line from a JavaScript error stack trace and adds it to the given `info` object.\n * Ignores all stack entries thrown from one of our wrapper functions.\n *\n * @param {object} info - The `info` object to add the parsed line to.\n * @param {string} line - The line to parse.\n * @returns {object} The `info` object with the parsed line added.\n */\nfunction parseStackProp(info, line) {\n  let element = getStackElement(line);\n\n  // This catches lines that aren't frames (like the first line stating the error).\n  if (!element) {\n    info.stackLines.push(line);\n    return info;\n  }\n\n  // Once we've seen a wrapper, ignore all subsequent stack entries.\n  if (isNrWrapper(element.func)) info.wrapperSeen = true;\n  if (!info.wrapperSeen) {\n    // Query strings and fragments should be removed, and URLs matching the loader's origin should be \"<inline>\".\n    let canonicalUrl = canonicalizeUrl(element.url);\n    if (canonicalUrl !== element.url) {\n      line = line.replace(element.url, canonicalUrl);\n      element.url = canonicalUrl;\n    }\n    info.stackLines.push(line);\n    info.frames.push(element);\n  }\n  return info;\n}\n\n/**\n * Parses a line from a JavaScript error stack trace to extract information about a stack trace element, such as the\n * URL, function name, line number, and column number.\n *\n * @param {string} line - A single line from a JavaScript error stack trace.\n * @returns {object} An object containing information about the stack trace element, including the URL, function\n *     name, line number, and column number (if available).\n */\nfunction getStackElement(line) {\n  var parts = line.match(gecko);\n  if (!parts) parts = line.match(chrome);\n  if (parts) {\n    return {\n      url: parts[2],\n      func: parts[1] !== 'Anonymous function' && parts[1] !== 'global code' && parts[1] || null,\n      line: +parts[3],\n      column: parts[4] ? +parts[4] : null\n    };\n  }\n  if (line.match(chromeEval) || line.match(ieEval) || line === 'anonymous') {\n    return {\n      func: 'evaluated code'\n    };\n  }\n}\n\n/**\n * Computes a stack trace object from an error object, by extracting the source and line number from the error object,\n * and using them to create a single stack frame.\n *\n * @param {Error} ex - The error object to compute the stack trace for.\n * @returns {Object|null} - An object representing the computed stack trace, or null if the\n * input error object does not contain a line number.\n */\nfunction computeStackTraceBySourceAndLine(ex) {\n  if (!('line' in ex)) return null;\n  var className = ex.name || getClassName(ex);\n\n  // Safari does not provide a URL for errors in eval'd code\n  if (!ex.sourceURL) {\n    return {\n      mode: 'sourceline',\n      name: className,\n      message: ex.message,\n      stackString: className + ': ' + ex.message + '\\n    in evaluated code',\n      frames: [{\n        func: 'evaluated code'\n      }]\n    };\n  }\n\n  // Remove any query string and fragment\n  var canonicalUrl = canonicalizeUrl(ex.sourceURL);\n  var stackString = className + ': ' + ex.message + '\\n    at ' + canonicalUrl;\n  if (ex.line) {\n    stackString += ':' + ex.line;\n    if (ex.column) {\n      stackString += ':' + ex.column;\n    }\n  }\n  return {\n    mode: 'sourceline',\n    name: className,\n    message: ex.message,\n    stackString,\n    frames: [{\n      url: canonicalUrl,\n      line: ex.line,\n      column: ex.column\n    }]\n  };\n}\n\n/**\n * For exceptions with no stack and only a message, derives a stack trace by extracting the class name and message.\n *\n * @param {Error} ex - The exception for which to compute the stack trace.\n * @returns {StackTrace} A stack trace object containing the name and message of the exception.\n */\nfunction computeStackTraceWithMessageOnly(ex) {\n  var className = ex.name || getClassName(ex);\n  if (!className) return null;\n  return {\n    mode: 'nameonly',\n    name: className,\n    message: ex.message,\n    stackString: className + ': ' + ex.message,\n    frames: []\n  };\n}\n\n/**\n * Attempts to extract the name of the constructor function (the class) of the given object.\n *\n * @param {Object} obj - The object for which to extract the constructor function name.\n * @returns {string} The name of the constructor function, or 'unknown' if the name cannot be determined.\n */\nfunction getClassName(obj) {\n  var results = classNameRegex.exec(String(obj.constructor));\n  return results && results.length > 1 ? results[1] : 'unknown';\n}\n\n/**\n * Checks whether the given function name is a New Relic wrapper function.\n *\n * @param {string} functionName - The name of the function to check.\n * @returns {boolean} True if the function name includes the string 'nrWrapper', false otherwise.\n */\nfunction isNrWrapper(functionName) {\n  return functionName && functionName.indexOf('nrWrapper') >= 0;\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport function stringHashCode(string) {\n  var hash = 0;\n  var charVal;\n  if (!string || !string.length) return hash;\n  for (var i = 0; i < string.length; i++) {\n    charVal = string.charCodeAt(i);\n    hash = (hash << 5) - hash + charVal;\n    hash = hash | 0; // Convert to 32bit integer\n  }\n\n  return hash;\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { canonicalFunctionName } from './canonical-function-name';\nimport { computeStackTrace } from './compute-stack-trace';\nimport { stringHashCode } from './string-hash-code';\nimport { truncateSize } from './format-stack-trace';\nimport { registerHandler as register } from '../../../common/event-emitter/register-handler';\nimport { HarvestScheduler } from '../../../common/harvest/harvest-scheduler';\nimport { stringify } from '../../../common/util/stringify';\nimport { handle } from '../../../common/event-emitter/handle';\nimport { mapOwn } from '../../../common/util/map-own';\nimport { getInfo, getConfigurationValue, getRuntime } from '../../../common/config/config';\nimport { now } from '../../../common/timing/now';\nimport { globalScope } from '../../../common/constants/runtime';\nimport { FEATURE_NAME } from '../constants';\nimport { FEATURE_NAMES } from '../../../loaders/features/features';\nimport { AggregateBase } from '../../utils/aggregate-base';\n\n/**\n * @typedef {import('./compute-stack-trace.js').StackInfo} StackInfo\n */\n\nexport class Aggregate extends AggregateBase {\n  static featureName = FEATURE_NAME;\n  constructor(agentIdentifier, aggregator) {\n    var _this;\n    super(agentIdentifier, aggregator, FEATURE_NAME);\n    _this = this;\n    this.stackReported = {};\n    this.observedAt = {};\n    this.pageviewReported = {};\n    this.errorCache = {};\n    this.currentBody = undefined;\n    this.errorOnPage = false;\n\n    // this will need to change to match whatever ee we use in the instrument\n    this.ee.on('interactionSaved', interaction => this.onInteractionSaved(interaction));\n\n    // this will need to change to match whatever ee we use in the instrument\n    this.ee.on('interactionDiscarded', interaction => this.onInteractionDiscarded(interaction));\n    register('err', function () {\n      return _this.storeError(...arguments);\n    }, this.featureName, this.ee);\n    register('ierr', function () {\n      return _this.storeError(...arguments);\n    }, this.featureName, this.ee);\n    const harvestTimeSeconds = getConfigurationValue(this.agentIdentifier, 'jserrors.harvestTimeSeconds') || 10;\n    const scheduler = new HarvestScheduler('jserrors', {\n      onFinished: function () {\n        return _this.onHarvestFinished(...arguments);\n      }\n    }, this);\n    scheduler.harvest.on('jserrors', function () {\n      return _this.onHarvestStarted(...arguments);\n    });\n\n    // Don't start harvesting until \"drain\" for this feat has been called (which currently requires RUM response).\n    this.ee.on(\"drain-\".concat(this.featureName), () => {\n      if (!this.blocked) scheduler.startTimer(harvestTimeSeconds); // and only if ingest will accept jserror payloads\n    });\n\n    // If RUM-call's response determines that customer lacks entitlements for the /jserror ingest endpoint, don't harvest at all.\n    register('block-err', () => {\n      this.blocked = true;\n      scheduler.stopTimer(true);\n    }, this.featureName, this.ee);\n    this.drain();\n  }\n  onHarvestStarted(options) {\n    // this gets rid of dependency in AJAX module\n    var body = this.aggregator.take(['err', 'ierr', 'xhr']);\n    if (options.retry) {\n      this.currentBody = body;\n    }\n    var payload = {\n      body,\n      qs: {}\n    };\n    var releaseIds = stringify(getRuntime(this.agentIdentifier).releaseIds);\n    if (releaseIds !== '{}') {\n      payload.qs.ri = releaseIds;\n    }\n    if (body && body.err && body.err.length && !this.errorOnPage) {\n      payload.qs.pve = '1';\n      this.errorOnPage = true;\n    }\n    return payload;\n  }\n  onHarvestFinished(result) {\n    if (result.retry && this.currentBody) {\n      mapOwn(this.currentBody, (key, value) => {\n        for (var i = 0; i < value.length; i++) {\n          var bucket = value[i];\n          var name = this.getBucketName(key, bucket.params, bucket.custom);\n          this.aggregator.merge(key, name, bucket.metrics, bucket.params, bucket.custom);\n        }\n      });\n      this.currentBody = null;\n    }\n  }\n  nameHash(params) {\n    return stringHashCode(\"\".concat(params.exceptionClass, \"_\").concat(params.message, \"_\").concat(params.stack_trace || params.browser_stack_hash));\n  }\n  getBucketName(objType, params, customParams) {\n    if (objType === 'xhr') {\n      return stringHashCode(stringify(params)) + ':' + stringHashCode(stringify(customParams));\n    }\n    return this.nameHash(params) + ':' + stringHashCode(stringify(customParams));\n  }\n\n  /**\n   * Builds a standardized stack trace string from the frames in the given `stackInfo` object, with each frame separated\n   * by a newline character. Lines take the form `<functionName>@<url>:<lineNumber>`.\n   *\n   * @param {StackInfo} stackInfo - An object specifying a stack string and individual frames.\n   * @returns {string} A canonical stack string built from the URLs and function names in the given `stackInfo` object.\n   */\n  buildCanonicalStackString(stackInfo) {\n    var canonicalStackString = '';\n    for (var i = 0; i < stackInfo.frames.length; i++) {\n      var frame = stackInfo.frames[i];\n      var func = canonicalFunctionName(frame.func);\n      if (canonicalStackString) canonicalStackString += '\\n';\n      if (func) canonicalStackString += func + '@';\n      if (typeof frame.url === 'string') canonicalStackString += frame.url;\n      if (frame.line) canonicalStackString += ':' + frame.line;\n    }\n    return canonicalStackString;\n  }\n  storeError(err, time, internal, customAttributes) {\n    // are we in an interaction\n    time = time || now();\n    const agentRuntime = getRuntime(this.agentIdentifier);\n    let filterOutput;\n    if (!internal && agentRuntime.onerror) {\n      filterOutput = agentRuntime.onerror(err);\n      if (filterOutput && !(typeof filterOutput.group === 'string' && filterOutput.group.length)) {\n        // All truthy values mean don't report (store) the error, per backwards-compatible usage,\n        // - EXCEPT if a fingerprinting label is returned, via an object with key of 'group' and value of non-empty string\n        return;\n      }\n      // Again as with previous usage, all falsey values would include the error.\n    }\n\n    var stackInfo = computeStackTrace(err);\n    var canonicalStackString = this.buildCanonicalStackString(stackInfo);\n    const params = {\n      stackHash: stringHashCode(canonicalStackString),\n      exceptionClass: stackInfo.name,\n      request_uri: globalScope?.location.pathname\n    };\n    if (stackInfo.message) params.message = '' + stackInfo.message;\n    // Notice if filterOutput isn't false|undefined OR our specified object, this func would've returned already (so it's unnecessary to req-check group).\n    // Do not modify the name ('errorGroup') of params without DEM approval!\n    if (filterOutput?.group) params.errorGroup = filterOutput.group;\n\n    /**\n     * The bucketHash is different from the params.stackHash because the params.stackHash is based on the canonicalized\n     * stack trace and is used downstream in NR1 to attempt to group the same errors across different browsers. However,\n     * the canonical stack trace excludes items like the column number increasing the hit-rate of different errors potentially\n     * bucketing and ultimately resulting in the loss of data in NR1.\n     */\n    var bucketHash = stringHashCode(\"\".concat(stackInfo.name, \"_\").concat(stackInfo.message, \"_\").concat(stackInfo.stackString));\n    if (!this.stackReported[bucketHash]) {\n      this.stackReported[bucketHash] = true;\n      params.stack_trace = truncateSize(stackInfo.stackString);\n      this.observedAt[bucketHash] = agentRuntime.offset + time;\n    } else {\n      params.browser_stack_hash = stringHashCode(stackInfo.stackString);\n    }\n    params.releaseIds = stringify(agentRuntime.releaseIds);\n\n    // When debugging stack canonicalization/hashing, uncomment these lines for\n    // more output in the test logs\n    // params.origStack = err.stack\n    // params.canonicalStack = canonicalStack\n\n    if (!this.pageviewReported[bucketHash]) {\n      params.pageview = 1;\n      this.pageviewReported[bucketHash] = true;\n    }\n    if (agentRuntime?.session?.state?.sessionReplayMode) params.hasReplay = true;\n    params.firstOccurrenceTimestamp = this.observedAt[bucketHash];\n    var type = internal ? 'ierr' : 'err';\n    var newMetrics = {\n      time\n    };\n\n    // sr, stn and spa aggregators listen to this event - stn sends the error in its payload,\n    // and spa annotates the error with interaction info\n    const msg = [type, bucketHash, params, newMetrics];\n    handle('errorAgg', msg, undefined, FEATURE_NAMES.sessionTrace, this.ee);\n    handle('errorAgg', msg, undefined, FEATURE_NAMES.spa, this.ee);\n    handle('errorAgg', msg, undefined, FEATURE_NAMES.sessionReplay, this.ee);\n\n    // still send EE events for other features such as above, but stop this one from aggregating internal data\n    if (this.blocked) return;\n    var att = getInfo(this.agentIdentifier).jsAttributes;\n    if (params._interactionId != null) {\n      // hold on to the error until the interaction finishes\n      this.errorCache[params._interactionId] = this.errorCache[params._interactionId] || [];\n      this.errorCache[params._interactionId].push([type, bucketHash, params, newMetrics, att, customAttributes]);\n    } else {\n      // store custom attributes\n      var customParams = {};\n      mapOwn(att, setCustom);\n      if (customAttributes) {\n        mapOwn(customAttributes, setCustom);\n      }\n      var jsAttributesHash = stringHashCode(stringify(customParams));\n      var aggregateHash = bucketHash + ':' + jsAttributesHash;\n      this.aggregator.store(type, aggregateHash, params, newMetrics, customParams);\n    }\n    function setCustom(key, val) {\n      customParams[key] = val && typeof val === 'object' ? stringify(val) : val;\n    }\n  }\n  onInteractionSaved(interaction) {\n    if (!this.errorCache[interaction.id] || this.blocked) return;\n    this.errorCache[interaction.id].forEach(item => {\n      var customParams = {};\n      var globalCustomParams = item[4];\n      var localCustomParams = item[5];\n      mapOwn(globalCustomParams, setCustom);\n      mapOwn(interaction.root.attrs.custom, setCustom);\n      mapOwn(localCustomParams, setCustom);\n      var params = item[2];\n      params.browserInteractionId = interaction.root.attrs.id;\n      delete params._interactionId;\n      if (params._interactionNodeId) {\n        params.parentNodeId = params._interactionNodeId.toString();\n        delete params._interactionNodeId;\n      }\n      var hash = item[1] + interaction.root.attrs.id;\n      var jsAttributesHash = stringHashCode(stringify(customParams));\n      var aggregateHash = hash + ':' + jsAttributesHash;\n      this.aggregator.store(item[0], aggregateHash, params, item[3], customParams);\n      function setCustom(key, val) {\n        customParams[key] = val && typeof val === 'object' ? stringify(val) : val;\n      }\n    });\n    delete this.errorCache[interaction.id];\n  }\n  onInteractionDiscarded(interaction) {\n    if (!this.errorCache || !this.errorCache[interaction.id] || this.blocked) return;\n    this.errorCache[interaction.id].forEach(item => {\n      var customParams = {};\n      var globalCustomParams = item[4];\n      var localCustomParams = item[5];\n      mapOwn(globalCustomParams, setCustom);\n      mapOwn(interaction.root.attrs.custom, setCustom);\n      mapOwn(localCustomParams, setCustom);\n      var params = item[2];\n      delete params._interactionId;\n      delete params._interactionNodeId;\n      var hash = item[1];\n      var jsAttributesHash = stringHashCode(stringify(customParams));\n      var aggregateHash = hash + ':' + jsAttributesHash;\n      this.aggregator.store(item[0], aggregateHash, item[2], item[3], customParams);\n      function setCustom(key, val) {\n        customParams[key] = val && typeof val === 'object' ? stringify(val) : val;\n      }\n    });\n    delete this.errorCache[interaction.id];\n  }\n}"],"names":["canonicalFunctionNameRe","canonicalFunctionName","functionNameString","match","stripNewlinesRegex","formatStackTrace","stackLines","stackString","length","truncatedLines","slice","join","truncateStackLines","replace","canonicalizeUrl","url","cleanedUrl","cleanURL","initialLocation","debug","classNameRegex","chrome","gecko","chromeEval","ieEval","computeStackTrace","ex","stack","errorInfo","split","reduce","parseStackProp","frames","wrapperSeen","mode","name","getClassName","message","computeStackTraceFromStackProp","e","className","sourceURL","func","canonicalUrl","line","column","computeStackTraceBySourceAndLine","computeStackTraceWithMessageOnly","info","element","parts","getStackElement","push","functionName","indexOf","obj","results","exec","String","constructor","stringHashCode","string","hash","i","charCodeAt","Aggregate","AggregateBase","agentIdentifier","aggregator","_this","super","FEATURE_NAME","this","stackReported","observedAt","pageviewReported","errorCache","currentBody","undefined","errorOnPage","ee","on","interaction","onInteractionSaved","onInteractionDiscarded","register","storeError","arguments","featureName","harvestTimeSeconds","getConfigurationValue","scheduler","HarvestScheduler","onFinished","onHarvestFinished","harvest","onHarvestStarted","concat","blocked","startTimer","stopTimer","drain","options","body","take","retry","payload","qs","releaseIds","stringify","getRuntime","ri","err","pve","result","mapOwn","key","value","bucket","getBucketName","params","custom","merge","metrics","nameHash","exceptionClass","stack_trace","browser_stack_hash","objType","customParams","buildCanonicalStackString","stackInfo","canonicalStackString","frame","time","internal","customAttributes","_filterOutput","_agentRuntime$session","now","agentRuntime","filterOutput","onerror","group","stackHash","request_uri","globalScope","location","pathname","errorGroup","bucketHash","substr","offset","pageview","session","state","sessionReplayMode","hasReplay","firstOccurrenceTimestamp","type","newMetrics","msg","handle","FEATURE_NAMES","sessionTrace","spa","sessionReplay","att","getInfo","jsAttributes","_interactionId","setCustom","aggregateHash","store","val","id","forEach","item","globalCustomParams","localCustomParams","root","attrs","browserInteractionId","_interactionNodeId","parentNodeId","toString","_defineProperty"],"sourceRoot":""}